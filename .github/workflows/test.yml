# Apache License 2.0

name: Test

on:
  workflow_call:
    inputs:
      project_name:
        description: The name of the project.
        required: true
        type: string
      project_version:
        description: The version of the project.
        required: true
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true

env:
  DOCKER_REGISTRY_PATH: openspacecollective
  LANG: en_US.UTF-8

jobs:
  format-check-cpp:
    name: Check C++ Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Pull Development Image
        run: docker pull ${{ env.DOCKER_REGISTRY_PATH }}/${{ inputs.project_name }}-development:${{ inputs.project_version }}
      - name: Check C++ Format
        run: make format-check-cpp-standalone

  test-unit-cpp:
    name: Run C++ Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Pull Development Image
        run: docker pull ${{ env.DOCKER_REGISTRY_PATH }}/${{ inputs.project_name }}-development:${{ inputs.project_version }}
      - name: Run Unit Tests C++
        run: make test-coverage-cpp-standalone
      - name: Upload Coverage Results
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage/
          fail_ci_if_error: true

  format-check-python:
    name: Check Python Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Pull Development Image
        run: docker pull ${{ env.DOCKER_REGISTRY_PATH }}/${{ inputs.project_name }}-development:${{ inputs.project_version }}
      - name: Check Python Format
        run: make format-check-python-standalone

  build-python:
    name: Build Python bindings
    runs-on: ubuntu-latest
    outputs:
      python_versions: ${{ steps.python-versions.outputs.value }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Pull Development Image
        run: docker pull ${{ env.DOCKER_REGISTRY_PATH }}/${{ inputs.project_name }}-development:${{ inputs.project_version }}
      - name: Build Python Bindings
        run: make build-packages-python-standalone
      - name: Upload Python Bindings
        uses: actions/upload-artifact@v4
        with:
          name: python-bindings # TBM: use a different namespace than in build-packages for now.
          path: packages/python/
      - id: python-versions
        name: Export Python Versions to Environment
        run: |
          python_versions=$(echo -n "["; find packages/python -name "*.whl" | grep -o "py[0-9]\{2,3\}" | sed 's/py\([0-9]\)\([0-9][0-9]\?\)/\1.\2/' | sed "s/\([0-9.]*\)/'\1'/" | tr '\n' ',' | sed 's/,$//'; echo "]")
          echo "Python versions: ${python_versions}"
          echo "value=${python_versions}" >> $GITHUB_OUTPUT

  test-unit-python:
    name: Run Python Unit Tests
    runs-on: ubuntu-latest
    needs:
      - build-python
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.build-python.outputs.python_versions) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Pull Development Image
        run: docker pull ${{ env.DOCKER_REGISTRY_PATH }}/${{ inputs.project_name }}-development:${{ inputs.project_version }}
      - name: Download Python packages
        uses: actions/download-artifact@v4
        with:
          name: python-bindings
          path: packages/python/
      - name: Run Unit Tests Python
        run: make ci-test-python ${{ format('test_python_version={0}', matrix.python-version) }}
